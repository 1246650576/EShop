<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee
                      http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"
         version="3.1">

  <display-name>Archetype Created Web Application</display-name>

  <!--配置SpringMVC的工厂-->
  <servlet>
    <servlet-name>mvc</servlet-name>
    <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
    <init-param>
      <param-name>contextConfigLocation</param-name>
      <param-value>classpath:spring-mvc.xml</param-value>
    </init-param>
    <load-on-startup>2</load-on-startup>
  </servlet>
  <servlet-mapping>
    <servlet-name>mvc</servlet-name>
    <url-pattern>/</url-pattern>
  </servlet-mapping>

  <!--配置Spring的工厂-->
  <listener>
    <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
  </listener>
  <context-param>
    <param-name>contextConfigLocation</param-name>
    <param-value>classpath:spring-config.xml</param-value>
  </context-param>

  <!-- 搭建shiro环境  -->
  <!-- 接收所有请求，以通过请求路径 识别是否需要 安全校验，如果需要则触发安全校验
  做访问校验时，会遍历过滤器链。(链中包含shiro.ini中urls内使⽤的过滤器)
  会通过ThreadContext在当前线程中绑定⼀个subject和SecurityManager，供请求内使⽤
  可以通过SecurityUtils.getSubject()获得Subject
  1.在项目的最外层构建访问控制层
  2.在启动时，初始化shiro环境
  -->
  <!--<filter>
    <filter-name>shiroFilter</filter-name>
    <filter-class>org.apache.shiro.web.servlet.ShiroFilter</filter-class>
  </filter>
  <filter-mapping>
    <filter-name>shiroFilter</filter-name>
    <url-pattern>/*</url-pattern>
  </filter-mapping>-->

  <!-- 会从spring⼯⼚中获取和它同名的bean，（id="shiroFilter"）
  接到请求后调⽤bean的doFilter⽅法，进⾏访问控制。
  -->
  <filter>
    <filter-name>shiroFilter</filter-name>
    <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
    <init-param>
      <param-name>targetFilterLifecycle</param-name>
      <param-value>true</param-value>
    </init-param>
  </filter>
  <filter-mapping>
    <filter-name>shiroFilter</filter-name>
    <url-pattern>/*</url-pattern>
  </filter-mapping>
  <!-- EnvironmentLoaderListener不再需要，因为shiro环境已由spring初始化
  springMVC,spring配置不变 -->

  <!-- 在项目启动时，加载web-info 或 classpath下的 xxx-shiro-xxx.ini ，并构建WebSecurityManager。
     构建所有配置中使用的过滤器链(anon,authc等)，ShiroFilter会获取此过滤器链
  -->
  <!--<listener>
    <listener-class>org.apache.shiro.web.env.EnvironmentLoaderListener</listener-class>
  </listener>-->

  <!--配置解决post请求乱码问题的过滤器-->
  <filter>
    <filter-name>encoding</filter-name>
    <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
    <init-param>
      <param-name>encoding</param-name>
      <param-value>utf-8</param-value>
    </init-param>
  </filter>
  <filter-mapping>
    <filter-name>encoding</filter-name>
    <url-pattern>/*</url-pattern>
  </filter-mapping>
  <filter-mapping>
    <filter-name>encoding</filter-name>
    <url-pattern>*.html</url-pattern>
  </filter-mapping>
  <filter-mapping>
    <filter-name>encoding</filter-name>
    <url-pattern>*.jsp</url-pattern>
  </filter-mapping>

  <filter>
    <filter-name>login</filter-name>
    <filter-class>cn.edu.ncu.filter.LoginFilter</filter-class>
  </filter>
  <filter-mapping>
    <filter-name>login</filter-name>
    <url-pattern>*.html</url-pattern>
  </filter-mapping>

</web-app>

